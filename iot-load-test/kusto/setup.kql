//  Create a landing table
.create table landing(document:dynamic)

//  Create the mapping from JSON ingestion to landing table
.create table landing ingestion json mapping 'landingMapping' '[{"column":"document","path":"$","datatype":"dynamic"}]'

//  Alter retention policy as this is just the landing zone
.alter table landing policy retention "{'SoftDeletePeriod': '0:5:00', 'Recoverability':'Enabled'}"

//  Alter ingestion policy to ingest more often than default (5 minutes)
.alter table landing policy ingestionbatching "{'MaximumBatchingTimeSpan': '0:0:10'}"

//  Create the records table:  this is the strong-type version of ingestion
.create table deviceLog(
    deviceId:string,
    generationId:long,
    enqueuedTime:datetime,
    recordedAt:datetime,
    payload:string)

//  Alter retention policy as this is only for end-user queries
.alter table landing policy retention "{'SoftDeletePeriod': '0:15:00', 'Recoverability':'Enabled'}"

//  Function used to parse the log
.create-or-alter function parseDeviceLog(){
    landing
    | project deviceId=tostring(document['iothub-connection-device-id']),
        generationId=tolong(document['iothub-connection-auth-generation-id']),
        enqueuedTime=todatetime(document['iothub-enqueuedtime']),
        recordedAt=todatetime(document.recordedAt),
        payload=tostring(document.payload)
}

//  Create an update policy to transfer landing to deviceLog
.alter table deviceLog policy update
@'[{"IsEnabled": true, "Source": "landing", "Query": "parseDeviceLog", "IsTransactional": true, "PropagateIngestionProperties": false}]'

//  Check for failures
.show ingestion failures 

//  Distribution of events by ingestion time
deviceLog
| summarize count() by bin(ingestion_time(), 1m)
| render timechart

//  Look at the ingestion latency
deviceLog
| project-away payload
| order by enqueuedTime desc
| extend ingestionTime=ingestion_time()
| extend delta = ingestionTime-recordedAt
| summarize min(delta), max(delta), oldest = max(now()-ingestionTime), youngest = min(now()-ingestionTime), oldestIngestion = min(ingestion_time()), mostRecentIngestion = max(ingestion_time())

//  Chart ingestion latency
deviceLog
| project-away payload
| order by enqueuedTime desc
| extend ingestionTime=ingestion_time()
| extend delta = ingestionTime-recordedAt
| summarize min(delta), max(delta) by bin(ingestionTime, 1m)
| render timechart

//  Find total delay
let anchor=now();
deviceLog
| project-away payload
| order by enqueuedTime desc
| extend ingestionTime=ingestion_time()
| extend delta = anchor-recordedAt
| summarize delay=min(delta) by deviceId
| summarize min(delay), max(delay)


landing
| limit 1
//| count

deviceLog
| count

//.drop extents <|
.show table deviceLog extents
